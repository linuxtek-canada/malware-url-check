# --- lambda.tf ---
# 
#Author:    Jason Paul 
#Email:     jasonpa@gmail.com

data "aws_iam_policy_document" "lambda_assume_role_policy" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "lambda_role" {
  name               = "lambda-lambdarole"
  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role_policy.json

  inline_policy {
    name   = "allow_dynamodb"
    policy = file("dynamodbpolicy.json")
  }
}


resource "aws_lambda_layer_version" "lambda_layer" {
  filename            = "../lambdalayer/lambdalayer.zip"
  layer_name          = "lambdalayer"
  compatible_runtimes = ["python3.9"]
}


data "archive_file" "malware_post_zip" {
  type        = "zip"
  source_file = "../python/postMalwareCheck.py"
  output_path = "../python/postmalwarecheck.zip"
}

resource "aws_lambda_function" "malware_post_function" {
  function_name    = "MalwarePostFunction"
  filename         = "../python/postmalwarecheck.zip"
  source_code_hash = data.archive_file.malware_post_zip.output_base64sha256
  role             = aws_iam_role.lambda_role.arn
  runtime          = "python3.9"
  handler          = "postMalwareCheck.lambda_handler"
  timeout          = 10
  layers           = [aws_lambda_layer_version.lambda_layer.arn]
}

data "archive_file" "malware_get_zip" {
  type        = "zip"
  source_file = "../python/getMalwareCheck.py"
  output_path = "../python/getmalwarecheck.zip"
}

resource "aws_lambda_function" "malware_get_function" {
  function_name    = "MalwareGetFunction"
  filename         = "../python/getmalwarecheck.zip"
  source_code_hash = data.archive_file.malware_get_zip.output_base64sha256
  role             = aws_iam_role.lambda_role.arn
  runtime          = "python3.9"
  handler          = "getMalwareCheck.lambda_handler"
  timeout          = 10
  layers           = [aws_lambda_layer_version.lambda_layer.arn]
}